******** COLLECTION *********

1) What is the Collection framework in Java?
Collection Framework is a combination of classes and interface, which is used to store and manipulate the data in the form of objects. 

It provides various classes such as ArrayList, Vector, Stack, and HashSet, etc. and interfaces such as List, Queue, Set, etc. for this purpose.



2) What are the main differences between array and collection?
Array and Collection are somewhat similar regarding storing the references of objects and manipulating the data, but they differ in many ways. The main differences between the array and Collection are defined below:

Arrays are always of fixed size, i.e., a user can not increase or decrease the length of the array according to their requirement or at runtime, but In Collection, size can be changed dynamically as per need.
Arrays can only store homogeneous or similar type objects, but in Collection, heterogeneous objects can be stored.
Arrays cannot provide the ?ready-made? methods for user requirements as sorting, searching, etc. but Collection includes readymade methods to use.



3) Explain various interfaces used in Collection framework?
Collection framework implements various interfaces, Collection interface and Map interface (java.util.Map) are the mainly used interfaces of Java Collection Framework.

1. Collection interface: Collection (java.util.Collection) is the primary interface, and every collection must implement this interface.

2. List interface: List interface extends the Collection interface, and it is an ordered collection of objects. It contains duplicate elements. It also allows random access of elements.
Syntax:

public interface List<E> extends Collection<E>  

3. Set interface: Set (java.util.Set) interface is a collection which cannot contain duplicate elements. It can only include inherited methods of Collection interface
Syntax:

public interface Set<E> extends Collection<E>  

4. Map interface: A Map (java.util.Map) represents a key, value pair storage of elements. 
Map interface does not implement the Collection interface. 
It can only contain a unique key but can have duplicate elements. 
There are two interfaces which implement Map in java that are Map interface and Sorted Map.



5) What is the difference between ArrayList and LinkedList?
	ArrayList											LinkedList
1)	ArrayList uses a dynamic array.								LinkedList uses a doubly linked list.
2)	ArrayList is not efficient for manipulation because too much is required.	LinkedList is efficient for manipulation.
3)	ArrayList is better to store and fetch data.						LinkedList is better to manipulate data.
4)	ArrayList provides random access.								LinkedList does not provide random access.
5)	ArrayList takes less memory overhead as it stores only object			LinkedList takes more memory overhead, as it stores the object as                   well as the address of that object.



6) What is the difference between Iterator and ListIterator?
Iterator traverses the elements in the forward direction only whereas ListIterator traverses the elements into forward and backward direction.
	Iterator										ListIterator
1)	The Iterator traverses the elements in the forward direction only.	ListIterator traverses the elements in backward and forward directions both.
2)	The Iterator can be used in List, Set, and Queue.			ListIterator can be used in List only.


7) What is the difference between List and Set?
The List and Set both extend the collection interface. 
However, there are some differences between the both which are listed below.

The List can contain duplicate elements whereas Set includes unique items.
The List is an ordered collection which maintains the insertion order whereas Set is an unordered collection which does not preserve the insertion order.
The List interface contains a single legacy class which is Vector class whereas Set interface does not have any legacy class.
The List interface can allow n number of null values whereas Set interface only allows a single null value.




1) What is the Collection framework in Java?
Collection Framework is a combination of classes and interface, which is used to store and manipulate the data in the form of objects. It provides various classes such as ArrayList, Vector, Stack, and HashSet, etc. and interfaces such as List, Queue, Set, etc. for this purpose.

2) What are the main differences between array and collection?
Array and Collection are somewhat similar regarding storing the references of objects and manipulating the data, but they differ in many ways. The main differences between the array and Collection are defined below:


Arrays are always of fixed size, i.e., a user can not increase or decrease the length of the array according to their requirement or at runtime, but In Collection, size can be changed dynamically as per need.
Arrays can only store homogeneous or similar type objects, but in Collection, heterogeneous objects can be stored.
Arrays cannot provide the ?ready-made? methods for user requirements as sorting, searching, etc. but Collection includes readymade methods to use.
3) Explain various interfaces used in Collection framework?
Collection framework implements various interfaces, Collection interface and Map interface (java.util.Map) are the mainly used interfaces of Java Collection Framework. List of interfaces of Collection Framework is given below:
1. Collection interface: Collection (java.util.Collection) is the primary interface, and every collection must implement this interface.


Syntax:

public interface Collection<E>extends Iterable  
Where <E> represents that this interface is of Generic type

2. List interface: List interface extends the Collection interface, and it is an ordered collection of objects. It contains duplicate elements. It also allows random access of elements.


Syntax:

public interface List<E> extends Collection<E>  
3. Set interface: Set (java.util.Set) interface is a collection which cannot contain duplicate elements. It can only include inherited methods of Collection interface
Syntax:


public interface Set<E> extends Collection<E>  
Queue interface: Queue (java.util.Queue) interface defines queue data structure, which stores the elements in the form FIFO (first in first out).


Syntax:

public interface Queue<E> extends Collection<E>  
4. Dequeue interface: it is a double-ended-queue. It allows the insertion and removal of elements from both ends. It implants the properties of both Stack and queue so it can perform LIFO (Last in first out) stack and FIFO (first in first out) queue, operations.

Syntax:


public interface Dequeue<E> extends Queue<E>  
5. Map interface: A Map (java.util.Map) represents a key, value pair storage of elements. Map interface does not implement the Collection interface. It can only contain a unique key but can have duplicate elements. There are two interfaces which implement Map in java that are Map interface and Sorted Map.


4) What is the difference between ArrayList and Vector?
No.	ArrayList	Vector
1)	ArrayList is not synchronized.	Vector is synchronized.
2)	ArrayList is not a legacy class.	Vector is a legacy class.
3)	ArrayList increases its size by 50% of the array size.	Vector increases its size by doubling the array size.
4)	ArrayList is not ?thread-safe? as it is not synchronized.	Vector list is ?thread-safe? as it?s every method is synchronized.



5) What is the difference between ArrayList and LinkedList?
No.	ArrayList	LinkedList
1)	ArrayList uses a dynamic array.	LinkedList uses a doubly linked list.
2)	ArrayList is not efficient for manipulation because too much is required.	LinkedList is efficient for manipulation.
3)	ArrayList is better to store and fetch data.	LinkedList is better to manipulate data.
4)	ArrayList provides random access.	LinkedList does not provide random access.
5)	ArrayList takes less memory overhead as it stores only object	LinkedList takes more memory overhead, as it stores the object as well as the address of that object.


6) What is the difference between Iterator and ListIterator?
Iterator traverses the elements in the forward direction only whereas ListIterator traverses the elements into forward and backward direction.
No.	Iterator	ListIterator
1)	The Iterator traverses the elements in the forward direction only.	ListIterator traverses the elements in backward and forward directions both.
2)	The Iterator can be used in List, Set, and Queue.	ListIterator can be used in List only.
3)	The Iterator can only perform remove operation while traversing the collection.	ListIterator can perform ?add,? ?remove,? and ?set? operation while traversing the collection.


7) What is the difference between Iterator and Enumeration?
No.	Iterator	Enumeration
1)	The Iterator can traverse legacy and non-legacy elements.	Enumeration can traverse only legacy elements.
2)	The Iterator is fail-fast.	Enumeration is not fail-fast.
3)	The Iterator is slower than Enumeration.	Enumeration is faster than Iterator.
4)	The Iterator can perform remove operation while traversing the collection.	The Enumeration can perform only traverse operation on the collection.


8) What is the difference between List and Set?
The List and Set both extend the collection interface. However, there are some differences between the both which are listed below.

The List can contain duplicate elements whereas Set includes unique items.
The List is an ordered collection which maintains the insertion order whereas Set is an unordered collection which does not preserve the insertion order.
The List interface contains a single legacy class which is Vector class whereas Set interface does not have any legacy class.
The List interface can allow n number of null values whereas Set interface only allows a single null value.


9) What is the difference between HashSet and TreeSet?
The HashSet and TreeSet, both classes, implement Set interface. The differences between the both are listed below.

HashSet maintains no order whereas TreeSet maintains ascending order.
HashSet impended by hash table whereas TreeSet implemented by a Tree structure.
HashSet performs faster than TreeSet.
HashSet is backed by HashMap whereas TreeSet is backed by TreeMap.


10) What is the difference between Set and Map?
The differences between the Set and Map are given below.
Set contains values only whereas Map contains key and values both.
Set contains unique values whereas Map can contain unique Keys with duplicate values.
Set holds a single number of null value whereas Map can include a single null key with n number of null values.



11) What is the difference between HashSet and HashMap?
The differences between the HashSet and HashMap are listed below.

HashSet contains only values whereas HashMap includes the entry (key, value). HashSet can be iterated, but HashMap needs to convert into Set to be iterated.
HashSet implements Set interface whereas HashMap implements the Map interface
HashSet cannot have any duplicate value whereas HashMap can contain duplicate values with unique keys.
HashSet contains the only single number of null value whereas HashMap can hold a single null key with n number of null values.



12) What is the difference between Collection and Collections?
The differences between the Collection and Collections are given below.

The Collection is an interface whereas Collections is a class.
The Collection interface provides the standard functionality of data structure to List, Set, and Queue. However, Collections class is to sort and synchronize the collection elements.
The Collection interface provides the methods that can be used for data structure whereas Collections class provides the static methods which can be used for various operation on a collection.



13) What is the difference between Array and ArrayList?
The main differences between the Array and ArrayList are given below.

	Array													ArrayList
1	The Array is of fixed size, means we cannot resize the array as per need.	ArrayList is not of the fixed size we can change the size dynamically.
2	Arrays are of the static type.								ArrayList is of dynamic size.
3	Arrays can store primitive data types as well as objects.				ArrayList cannot store the primitive data types it can only store the objects.



14) What is the difference between the length of an Array and size of ArrayList?
The length of an array can be obtained using the property of length whereas ArrayList does not support length property, but we can use size() method to get the number of objects in the list.
Finding the length of the array
Int [] array = new int[4];  
System.out.println("The size of the array is " + array.length);  

Finding the size of the ArrayList
ArrayList<String> list=new ArrayList<String>();    
list.add("ankit");    
list.add("nippun");  
System.out.println(list.size());  


15) How to convert ArrayList to Array and Array to ArrayList?
We can convert an Array to ArrayList by using the asList() method of Arrays class. asList() method is the static method of Arrays class and accepts the List object.
Syntax: Arrays.asList(item)  

We can convert an ArrayList to Array using toArray() method of the ArrayList class.
Syntax: List_object.toArray(new String[List_object.size()])  


16) How to remove duplicates from ArrayList?
There are two ways to remove duplicates from the ArrayList.

Using HashSet: By using HashSet we can remove the duplicate element from the ArrayList, but it will not then preserve the insertion order.

Using LinkedHashSet: We can also maintain the insertion order by using LinkedHashSet instead of HashSet.
The Process to remove duplicate elements from ArrayList using the LinkedHashSet:

Copy all the elements of ArrayList to LinkedHashSet.
Empty the ArrayList using clear() method, which will remove all the elements from the list.
Now copy all the elements of LinkedHashset to ArrayList.



17) How to reverse ArrayList?
To reverse an ArrayList, we can use reverse() method of Collections class. Consider the following example.

import java.util.ArrayList;  
import java.util.Collection;  
import java.util.Collections;  
import java.util.Iterator;  
import java.util.List;  
public class ReverseArrayList {  
public static void main(String[] args) {  
     List list = new ArrayList<>();  
     list.add(10);  
     list.add(50);  
     list.add(30);  
     Iterator i = list.iterator();  
     System.out.println("printing the list....");  
     while(i.hasNext())  
     {  
         System.out.println(i.next());  
     }  
     Iterator i2 = list.iterator();  
     Collections.reverse(list);  
     System.out.println("printing list in reverse order....");  
     while(i2.hasNext())  
     {  
         System.out.println(i2.next());  
     }  
    }  
}  



18) How to sort ArrayList in descending order?
To sort the ArrayList in descending order, we can use the reverseOrder method of Collections class. Consider the following example.

import java.util.ArrayList;  
import java.util.Collection;  
import java.util.Collections;  
import java.util.Comparator;  
import java.util.Iterator;  
import java.util.List;  
  
public class ReverseArrayList {  
public static void main(String[] args) {  
     List list = new ArrayList<>();  
     list.add(10);  
     list.add(50);  
     list.add(30);  
     list.add(60);  
     list.add(20);  
     list.add(90);  
       
     Iterator i = list.iterator();  
     System.out.println("printing the list....");  
     while(i.hasNext())  
     {  
         System.out.println(i.next());  
     }  
      
    Comparator cmp = Collections.reverseOrder();  
    Collections.sort(list,cmp);  
     System.out.println("printing list in descending order....");  
     Iterator i2 = list.iterator();  
     while(i2.hasNext())  
     {  
         System.out.println(i2.next());  
     }  
       


19. What is the difference between List, set, and map in java?
List

Set

Map

The list interface allows duplicate elements

The set does not allow duplicate elements.

The map does not allow duplicate elements



The list maintains insertion order.

The set does not maintain any insertion order. 

The map also does not maintain any insertion order. 


We can add any number of null values.

But in the set almost only one null value.

The map allows a single null key at most and any number of null values.


The list implementation classes are Array List and LinkedList.

Set implementation classes are HashSet, LinkedHashSet, and TreeSet. 

Map implementation classes are HashMap, HashTable, TreeMap, ConcurrentHashMap, and LinkedHashMap.



20. What is the difference between Comparable and Comparator in Java?
Java provides two interfaces to sort objects using data members of the class: 

Comparable
Comparator
Comparable

Comparator

The Comparable interface provides a single sorting sequence.	The Comparator interface provides multiple sorting sequences.
The actual class is modified by a comparable interface		The actual class is not modified by the Comparator interface.
compareTo() method is used to sort elements.				compare() method is used to sort elements.



21. Can HashMap have duplicate keys?
No, HashMap can’t have duplicate keys. 
As HashMap is one of the collections in Java, it stores the value in the form of key-value and every key has its own value attached to it. So, as no key can have two value means we can’t have duplicate keys in HashMap.
























